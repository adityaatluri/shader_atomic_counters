#ifndef ATOMIC_COUNTERS_H
#define ATOMIC_COUNTERS_H

/*
The token names defined here are acceptable
The values are dependant on the GLSL compiler
*/

/*Accepted by BindBufferBase and BindBufferRange*/
#define GL_ATOMIC_COUNTER_BUFFER					0x92C0


#define GL_ATOMIC_COUNTER_BUFFER_BINDING				0x92C1


#define GL_ATOMIC_COUNTER_BUFFER_START					0x92C2
#define GL_ATOMIC_COUNTER_BUFFER_SIZE					0x92C3


#define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE				0x92C4
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS			0x92C5
#define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES		0x92C6
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER		0x92C7
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER	0x92C8
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER	0x92C9
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER		0x92CA
#define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER		0x92CB


#define MAX_VERTEX_ATOMIC_COUNTER_BUFFERS				0x92CC
#define MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS				0x92CD
#define MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS			0x92CE
#define MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS				0x92CF
#define MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS				0x92D0
#define MAX_COMBINED_ATOMIC_COUNTER_BUFFERS				0x92D1

#define MAX_VERTEX_ATOMIC_COUNTERS					0x92D2
#define MAX_TESS_CONTROL_ATOMIC_COUNTERS				0x92D3
#define MAX_TESS_EVALUATION_ATOMIC_COUNTERS				0x92D4
#define MAX_GEOMETRY_ATOMIC_COUNTERS					0x92D5
#define MAX_FRAGMENT_ATOMIC_COUNTERS					0x92D6
#define MAX_COMBINED_ATOMIC_COUNTERS					0x92D7

#define MAX_ATOMIC_COUNTER_BUFFER_SIZE					0x92D8
#define MAX_ATOMIC_COUNTER_BUFFER_BINDINGS				0x92DC


#define ACTIVE_ATOMIC_COUNTER_BUFFERS					0x92D9


#define UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX				0x92DA


#define UNSIGNED_INT_ATOMIC_COUNTER					0x92DB


typedef unsigned int atomic_uint;
typedef int atomic_int;

unsigned int atomicCounterIncement(
				atomic_uint counter
				);

unsigned int atomicCounterDecrement(
				atomic_uint counter
				);

unsigned int atomicCounter(
				atomic_uint counter
				);

void GetActiveAtomicCounterBufferiv(
				uint program,
				uint bufferIndex,
				enum oname,
				int *params
				);


#endif
